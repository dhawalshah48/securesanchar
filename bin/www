#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('secure:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 
var io = require('socket.io')(server);
var us1 = null;
var us2 = null;
io.on('connection', function(socket)
{
	console.log("A user Connected");
	socket.on('disconnect', function(socket)
	{
		console.log("A user disconnected");
	});
	
	socket.on('messageFromClient', function(data)
	{
		io.emit('messageViaServer', {encMessage: data.encMessage});
		console.log(data.encMessage);
  });
  
  socket.on('msg', function(data){
    console.log(data);
  })

  socket.on('fromClientPublicKey', function(data)
  {
    if(us1==null) 
    {
      us1 = req.body.pkey;
      io.emit('youAreTheOne', {});
    }
    else 
    {
      us2 = req.body.pkey;
      io.emit('publicKeysLeLo', {keys: [us1, us2]});
      console.log([us1, us2]);
    }
  })
});


//----------------------- GET PUBLIC KEY OF USER ----------------------------


server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
