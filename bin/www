#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('secure:server');
var http = require('http');
var usermodels = require("../models/usermodels")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 
var io = require('socket.io')(server);
var onlineUsers = []
io.on('connection', function(socket)
{
	console.log("A user Connected");
	
	socket.on('connected', function(data)
	{
		socket.join(data.userId); // Add user to his individual Room !
		console.log(data);
	});
	
	socket.on('fromClientPublicKey', function(data)
	{
		var userId = data.userId;
		var email = data.email;
		var publicKey = data.publicKey;
		
		if(!onlineUsers.some(e => e.email == email)){
			usermodels.addKey("register",data,function(result){
				//if(result)
				//console.log(result)

			})
			
			//----Add the public key to the user with corresponding email if user already registered----
			
			onlineUsers.push({email: email, socket: socket, publicKey: publicKey}); 
		}
		console.log(data);
	});
	
	socket.on('sendIndividualMessage', function(data)

	{	console.log(data)	
		usermodels.getKey("register",data,function(result){
			console.log(result)
				console.log(result[0].publicKey)
		socket.emit('publicKeyOfOtherUser', {publicKey: result[0].publicKey});
		

	})
		//---------------- Get Public Key of the user we want to send Message to -------------
		
	});
	
	
	socket.on('disconnect', function(socket)
	{
		console.log("A user disconnected");
	});
	
	socket.on('messageFromClient', function(data)
	{
		
		var toUserId = data.toUserId;
		var toEmail = data.toEmail;
		var fromUserId = data.fromUserId;
		var message = data.message;
		var key=data.key;
	/*	usermodels.insertMessage("privatechat",data,function(result){


		})*/
		//-----------------Add message to Database for the corresponding toUserId and fromUserID-----------
		
		io.sockets.in(toUserId).emit('messageToClient', {fromUserId: fromUserId, message: message, key:key});
		socket.emit('messageSentToServer', {toUserId: toUserId});
		
		console.log(data);
	});
});





//----------------------- GET PUBLIC KEY OF USER ----------------------------


server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
